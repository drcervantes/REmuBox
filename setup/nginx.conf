load_module modules/ngx_http_js_module.so;
load_module modules/ngx_stream_js_module.so;

worker_processes auto;
pid /run/nginx.pid;
daemon on;

events {
	worker_connections 1024;
}

# http block defines the parameters for how NGINX should handle HTTP web traffic
http {
	# Include the file defining the list of file types that are supported by NGINX
	include /etc/nginx/mime.types;
	# Define the default file type that is returned to the user
	default_type text/html;

	# Define the format of log messages.
	log_format main '$remote_addr - $remote_user [$time_local] "$request" '
	                '$status $body_bytes_sent "$http_referer" '
	                '"$http_user_agent" "$http_x_forwarded_for"';

	# Define the location of the log of access attempts to NGINX
	access_log /var/log/nginx/access.log main;

	# Define the parameters to optimize the delivery of static content
	sendfile     on;
	tcp_nopush   on;
	tcp_nodelay  on;

	# Define the timeout value for keep-alive connections with the client
	keepalive_timeout 65;

	# Define the parameters for a specific virtual host/server
	server {
		# Define the server name, IP address, and/or port of the server
		listen 80;
		# server_name xxx.yyy.zzz.aaa

		# Define the specified charset to the “Content-Type” response header field
		charset utf-8;

		# Configure NGINX to deliver static content from the specified folder
		location /static {
			alias /home/aegis/REmuBox/remu/static;
		}

		# Configure NGINX to reverse proxy HTTP requests to the upstream server (Gunicorn (WSGI server))
		location / {
			# Define the location of the proxy server to send the request to
			proxy_pass http://localhost:56738;

			# Redefine the header fields that NGINX sends to the upstream server
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

			# Define the maximum file size on file uploads
			client_max_body_size 5M;
		}
	}
}



stream {
	js_include /etc/nginx/rdp_hook.js;
	js_set $session setSessionId;

	log_format rdp_log '$remote_addr [$time_local] $protocol $status $bytes_received $bytes_sent $upstream_addr $session';

	include /etc/nginx/rdp_upstreams.conf;

	map $session $backend {
	    include /etc/nginx/rdp_maps.conf;
	}

	server {
		listen 9000;
		preread_buffer_size 1k; 
		js_preread getSessionId; 

		proxy_pass $backend;
		proxy_connect_timeout 1s;

		access_log /etc/nginx/logs/rdp_access.log rdp_log;
		error_log  /etc/nginx/logs/rdp_error.log info; 
	}
}
